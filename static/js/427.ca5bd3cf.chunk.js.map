{"version":3,"file":"static/js/427.ca5bd3cf.chunk.js","mappings":"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","sources":["components/Form/Form.styled.jsx","components/ShowPassword/ShowPassword.styled.jsx","components/ShowPassword/ShowPassword.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { colors } from 'constants';\nimport { mediaSizes } from 'constants/media';\n\nexport const FormContainer = styled.form``;\n\nexport const Caption = styled.p`\n  margin: 0;\n  margin-top: 40px;\n  margin-bottom: 55px;\n  margin-right: auto;\n  text-transform: uppercase;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.2;\n  letter-spacing: 0.04em;\n  color: ${colors.color1};\n  text-align: center;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    margin-top: 160px;\n    text-align: left;\n  }\n`;\n\nexport const Label = styled.span`\n  position: relative;\n  margin: 0;\n  margin-right: auto;\n  font-family: 'Verdana';\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.2;\n  letter-spacing: 0.04em;\n  color: ${colors.color2};\n`;\n\nexport const ButtonContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    flex-direction: row;\n    gap: 32px;\n  }\n`;\n","import styled from '@emotion/styled';\nimport { BsFillEyeFill } from 'react-icons/bs';\nimport { BsFillEyeSlashFill } from 'react-icons/bs';\n\nexport const ShowPasswordButton = styled.button`\n  position: absolute;\n  top: 19px;\n  right: 5px;\n  border: none;\n  background-color: transparent;\n  padding: 5px;\n  cursor: pointer;\n`;\n\nexport const ShowIcon = styled(BsFillEyeFill)`\n  width: 18px;\n  fill: rgba(0, 0, 0, 1);\n`;\n\nexport const HideIcon = styled(BsFillEyeSlashFill)`\n  width: 18px;\n  fill: rgba(0, 0, 0, 0.3);\n`;\n","import {\n  ShowPasswordButton,\n  ShowIcon,\n  HideIcon,\n} from './ShowPassword.styled.jsx';\n\nconst ShowPassword = ({ isShown, clickHandler }) => {\n  return (\n    <ShowPasswordButton type=\"button\" onClick={clickHandler}>\n      {isShown ? <ShowIcon /> : <HideIcon />}\n    </ShowPasswordButton>\n  );\n};\n\nexport default ShowPassword;\n","import styled from '@emotion/styled';\nimport { mediaSizes } from 'constants/media';\nimport { container } from 'helpers';\n\nexport const RegisterFormStyled = styled.div`\n  ${container};\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n  }\n`;\n\nexport const FormFields = styled.div`\n  margin-bottom: 60px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    max-width: 240px;\n  }\n`;\n","import { FormFields, RegisterFormStyled } from './RegisterForm.styled';\nimport { Caption, ButtonContainer } from 'components/Form/Form.styled';\nimport { InputWraper } from 'components/Form/Input.styled';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from 'components/Styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from '../../redux/user/operations';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as yup from 'yup';\nimport Message from 'components/Message/Message';\nimport ShowPassword from 'components/ShowPassword/ShowPassword';\nimport { useState } from 'react';\nimport { selectAuthError } from '../../redux/user/selectors';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [passwordShown, setPasswordShown] = useState(false);\n  const initialValues = { username: '', email: '', password: '' };\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();\n  };\n\n  const schema = yup.object().shape({\n    username: yup\n      .string()\n      .min(3, 'Username must be at least 3 characters')\n      .max(254, 'Username must be less than or equal to 254 characters')\n      .required('Username is a required field'),\n    email: yup\n      .string()\n      .email('Email must be a valid email')\n      .min(3, 'Email must be at least 3 characters')\n      .max(254, 'Email must be less than or equal to 254 characters')\n      .required('Email is a required field'),\n    password: yup\n      .string()\n      .min(8, 'Password must be at least 8 characters')\n      .max(100, 'Password must be less than or equal to 100 characters')\n      .required('Password is a required field'),\n  });\n\n  const message = useSelector(selectAuthError);\n\n  const navigate = useNavigate();\n  const redirection = () => {\n    const path = '/register';\n    navigate(path);\n  };\n\n  const onClickHandler = () => {\n    setPasswordShown(state => !state);\n  };\n\n  return (\n    <RegisterFormStyled>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <Caption>Register</Caption>\n          <FormFields>\n            <InputWraper>\n              <Field\n                type=\"text\"\n                name=\"username\"\n                placeholder=\" \"\n                autoComplete=\"off\"\n              />\n              <label htmlFor=\"username\">Name *</label>\n              <ErrorMessage className=\"error\" component=\"div\" name=\"username\" />\n            </InputWraper>\n\n            <InputWraper>\n              <Field\n                type=\"text\"\n                name=\"email\"\n                placeholder=\" \"\n                autoComplete=\"off\"\n              />\n              <label htmlFor=\"email\">Email *</label>\n              <ErrorMessage className=\"error\" component=\"div\" name=\"email\" />\n            </InputWraper>\n\n            <InputWraper>\n              <ShowPassword\n                clickHandler={onClickHandler}\n                isShown={passwordShown}\n              />\n              <Field\n                type={passwordShown ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\" \"\n                autoComplete=\"off\"\n              />\n              <label htmlFor=\"password\">Password *</label>\n              <ErrorMessage className=\"error\" component=\"div\" name=\"password\" />\n            </InputWraper>\n          </FormFields>\n          <ButtonContainer>\n            <Button\n              className=\"white regLogbutton\"\n              type=\"button\"\n              onClick={redirection}\n            >\n              Log In\n            </Button>\n            <Button className=\"orange regLogbutton\" type=\"submit\">\n              Register\n            </Button>\n          </ButtonContainer>\n        </Form>\n      </Formik>\n      {message && <Message>{message}</Message>}\n    </RegisterFormStyled>\n  );\n};\n","import { Background } from 'components/Background/Background';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from '../redux/user/selectors';\n\nconst Register = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  return (\n    <>\n      <RegisterForm />\n      {!isLoggedIn && <Background />}\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["Caption","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","colors","mediaSizes","ButtonContainer","_templateObject3","_templateObject4","ShowPasswordButton","ShowIcon","BsFillEyeFill","HideIcon","BsFillEyeSlashFill","_ref","isShown","clickHandler","_jsx","type","onClick","children","RegisterFormStyled","container","FormFields","RegisterForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","passwordShown","setPasswordShown","schema","yup","shape","username","min","max","required","email","password","message","useSelector","selectAuthError","navigate","useNavigate","_jsxs","Formik","initialValues","validationSchema","onSubmit","values","resetForm","register","Form","autoComplete","InputWraper","Field","name","placeholder","htmlFor","ErrorMessage","className","component","ShowPassword","state","Button","Message","isLoggedIn","selectIsLoggedIn","_Fragment","Background"],"sourceRoot":""}